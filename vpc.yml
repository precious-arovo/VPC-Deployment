# YAML script aimed to deploy AWS infrastructure, establish a virtual private cloud (VPC) with associated components.

AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: ... VPC resource deployment
        Parameters:
          - EnvironmentName
          - VpcCIDR
          - DataCenterPublicSubnetCIDR


Parameters:
  EnvironmentName:
    Description: >
      A string that will be prefixed onto each resource
      created in the template.
    Type: string
    Default: '...'
  VpcCIDR:
    Description: >
      The IPv4 address space, given in CIDR notation,
      for the VPC hosting the scnario challenge.
    Type: string
    Default: '...'
  DataCenterPublicSubnetCIDR:
    Description: >
      The IPv4 address space, given in CIDR notation,
      for the publicly accessble portion of tthe VPC.
    Type: string
    Default:  '...'


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags: 
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  DataCenterPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DataCenterPublicSubnetCIDR
      AvaialabilityZone: !Select
        - 0
        - !GetAZs !Ref "AWS::Region"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: "... Data Center Subnet"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "... Public Routes"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
       RouteTableId: !Ref PublicRouteTable
       DestinationCidrBlock: '...'
       GatewayId: !Ref: InternetGateway

  DataCenterPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref DataCenterPublicSubnet

  WindowsInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >
        This security group permits RDP, Remote Desktop Protocol access
        to an instance deployed within the public subnet of the VPC.
      GroupName: ...-WindowsInstanceSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: ....
          ToPort: ....
          CidrIp: '....'
      Tags:
        - Key: Name
          Value: "... -WindowsInstanceSG"
      VpcId: !Ref VPC

  FileServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >
        This security group is responsible for permitting ssh access
        to the data center's file server from an internal source within the VPC
      GroupName: ... -FileServerSG
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: ..
          ToPort: ..
          CidrIp: '...'
      Tags: 
        - Key: Name
          Value: "... -FileServerSG"
      VpcId: !Ref 
      
FileGatewaySG:
Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >
        This security group controls access to the file gateway instance.
      GroupName: ... -FileGatewaySG
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: .
          ToPort: .....
          CidrIp: '....'
      Tags: 
        - Key: Name
          Value: "... -FileGatewaySG"
      VpcId: !Ref VPC